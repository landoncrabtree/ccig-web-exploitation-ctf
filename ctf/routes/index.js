var express = require('express');
var router = express.Router();

function sanitize(input) {
  // I've worked on this function for a couple months now...
  // It should be safe to use in production!
  // Strips '<script>' and '</script>' tags
  // Strips '<?php' and '?>' tags
  input = input.replace(/<script>/g, '');
  input = input.replace(/<\/script>/g, '');
  input = input.replace(/<\?php/g, '');
  input = input.replace(/\?>/g, '');
  // Strips 'javascript:' from attributes
  input = input.replace(/javascript:/g, '');
  // Strips '<iframe>' and '</iframe>' tags
  input = input.replace(/<iframe>/g, '');
  input = input.replace(/<\/iframe>/g, '');
  // Strip "onerror" attributes
  // Strip "onload" attributes
  input = input.replace(/onerror/g, '');
  input = input.replace(/onload/g, '');
  return input;
}

/* GET home page. */
router.get('/', function(req, res, next) {
  res.render('index', 
    { 
      title: 'ccig-web-exploitation-demo' 
    });
});

/* GET dompurify page. */
router.get('/dompurify', function(req, res, next) {
  res.render('dompurify', 
    { 
      title: 'Landon\'s DOMPurify'
    });
});

/* POST dompurify page. */
router.post('/dompurify', function(req, res, next) {
  let input = sanitize(req.body.input);
  res.render('dompurify', 
    { 
      title: 'Landon\'s DOMPurify',
      sanitized: input
    });
});

/* GET agent page. */
router.get('/agent', function(req, res, next) {
  let ua = req.headers['user-agent'];
  let auth;
  if (ua == "CyberEagles Proprietary Browser") {
    res.status(200)
    auth = true
  } else {
    res.status(401)
    auth = false
  }
  res.render('agent', 
    { 
      title: 'CyberEagles Employee Portal',
      auth: auth
    });
});

/* GET metflix page. */
router.get('/metflix', function(req, res, next) {
  // set cookie if not set
  let username = req.cookies['username'];
  if (!req.cookies['username']) {
    res.cookie("username", "guest");
    username = "guest";
  }
  res.render('metflix', 
    { 
      title: 'Metflix',
      username: username
    });
});

/* POST metflix page. */
router.post('/metflix', function(req, res, next) {
  // set cookie if not set
  let username = req.cookies['username'];
  if (!req.cookies['username']) {
    res.cookie("username", "guest");
    username = "guest";
  }
  res.render('metflix', 
    { 
      title: 'Metflix',
      username: username,
      error: "Invalid username or password"
    });
});

/* GET source page. */
router.get('/source', function(req, res, next) {
  let show_flag = false
  let show_source = false
  // Debugging stuff, remove in production!!!
  if (req.query.source == "true") {
    show_source = true
  }
  if (req.query.flag == "true") {
    if (typeof req.query.urls != 'undefined') {
      let urls = req.query.urls
      if (typeof req.query.number != 'undefined') {
        let number = req.query.number
        if (typeof req.query.username != 'undefined') {
          let username = req.query.username
          if (urls.length > 1) {
            if (number.length == 13 && parseInt(number) == 1271) {
              let buff = new Buffer.from("YWRtaW5pc3RyYXRvcg==", "base64");
              let text = buff.toString("ascii");
              if (username == text) {
                show_flag = true
              }
            }
          }
        }
      }
    }
  }
  res.render('source', 
    { 
      title: 'Secure Source Code',
      show_flag: show_flag,
      show_source: show_source
    });
});

module.exports = router;
