extends layout

block content
    // include icons
    script(defer src="https://use.fontawesome.com/releases/v5.15.4/js/all.js" integrity="sha384-rOA1PnstxnOBLzCLMcre8ybwbTmemjzdNlILg8O7z1lUkLXozs4DHonlDtnE7fpc" crossorigin="anonymous")
    h1= title
    a(href="./home") Home | 
    a(href="./register") Register | 
    a(href="./login") Login
    if page == "home"
        br
        br
        p This is a simple blog I made to test my programming skills! I hope you enjoy it!
        h1 Recent Posts
        h2
            mark Secure programming practices
        b Author: superUser75@gmail.com (03/01/2019)
        p Secure programming is the process of writing software code that is resistant to unauthorized access, attacks, and data breaches. It is essential in the development of software that handles sensitive data, such as financial information or personal data.
        p Here are some secure programming practices that developers should follow:
        ul
            li Input validation: Always validate and sanitize user input before processing it. This will prevent attacks such as SQL injection, cross-site scripting (XSS), and buffer overflow.
            li Error handling: Proper error handling is critical in secure programming. Error messages should not reveal sensitive information that can be used to exploit the system.
            li Access control: Limit access to sensitive data or functions to authorized users. Use authentication and authorization mechanisms to verify the identity and permissions of users.
            li Encryption: Data should be encrypted while in transit and at rest to prevent unauthorized access. Use strong encryption algorithms and keys.
            li Regular updates: Keep software up-to-date with the latest security patches and updates. This will help prevent attacks that exploit known vulnerabilities.
            li Testing: Test the software thoroughly for security vulnerabilities before deploying it. Use tools like vulnerability scanners and penetration testing to identify weaknesses.
            li Minimize attack surface: Reduce the attack surface of the software by disabling unnecessary features and services.
            li Code reviews: Conduct regular code reviews to identify security vulnerabilities and ensure that coding standards are being followed.
        ul
        p Remember, security is a process, not a product. It is important to follow secure programming practices throughout the software development lifecycle.
        p Peace out!
        i(class="fa fa-heart" color="red")
        span  0 likes
        br
        br
        h2 
            mark Why Minecraft is the best game ever
        b Author: superUser75@gmail.com (02/21/2019)
        p Minecraft is a sandbox video game that was first released in 2011. Since then, it has become one of the most popular games in the world, with millions of players of all ages. There are many reasons why Minecraft is the best game ever, and in this blog post, we will explore a few of them.
        ul
            li  Endless possibilities: Minecraft offers endless possibilities for creativity and exploration. Players can build anything they can imagine, from towering castles to sprawling cities, and explore vast landscapes filled with caves, mountains, and oceans.
            li Multiplayer mode: Minecraft's multiplayer mode allows players to connect with others around the world, working together to build and explore. This makes the game even more engaging and social, as players can collaborate and compete with each other.
            li Educational value: Minecraft has been used as an educational tool in classrooms around the world, teaching skills such as problem-solving, teamwork, and creativity. It can also be used to teach programming and coding skills, making it a valuable tool for students and educators alike.
            li Regular updates: The developers of Minecraft are constantly adding new features and updates to the game, keeping it fresh and engaging for players. This ensures that there is always something new to discover and explore in the game.
            li Modding community: Minecraft's modding community is one of the most active and creative in the gaming world. Players can modify the game in countless ways, adding new features, items, and game modes.
        ul
        p Here's a pic of my base :D
        img(src="https://images.hindustantimes.com/tech/img/2021/06/29/original/regularbase_1624959513885.png" width="35%")
        p In conclusion, Minecraft is the best game ever because of its endless possibilities, multiplayer mode, educational value, regular updates, and modding community. Whether you're a seasoned player or a newcomer, there is always something new and exciting to discover in Minecraft.
        p Thanks for reading!
        i(class="fa fa-heart" color="red")
        span  3 likes
        br
        br
        h2
            mark Using Express to build a simple blog
        b Author: superUser75@gmail.com (02/20/2019)
        p Express is a web application framework for Node.js. It is one of the most popular frameworks for building web applications, and it is used by many large companies, including Uber, PayPal, and Netflix. In this blog post, we will explore how to use Express to build a simple blog.
        ul
            li Install Node.js: First, you will need to install Node.js. You can download it from the Node.js website.
            li Install Express: Next, you will need to install Express. You can do this by running the following command in your terminal:
            li Create a new project: Create a new project folder and navigate to it in your terminal.
            li Initialize the project: Initialize the project by running the following command in your terminal:
                pre 
                    | npm init -y
            li Install dependencies: Install the dependencies by running the following command in your terminal:
                pre
                    | npm install express ejs
            li Create a server: Create a server by creating a new file called server.js in your project folder. Add the following code to the file:
                pre
                    | const express = require('express');
                    | const app = express();
                    | const port = 3000;
                    | app.get('/', (req, res) => {
                    |   host = req.get('host');
                    |   res.send('Hello World!');
                    |   console.log(host + " delivered the message 'Hello World!'")
                    | });
                    | app.listen(port, () => {                           
                    |   console.log(`Example app listening at http://localhost:${port}`);
                    | });
            li Start the server: Start the server by running the following command in your terminal:
                pre
                    | node server.js
            li Test the server: Test the server by navigating to http://localhost:3000 in your browser.
        i(class="fa fa-heart" color="red")
        span  1 likes


    else if page == "register"
        br
        br
        form(action="./register" method="post")
            input(type="email" name="email" id="email" placeholder="Email address")
            br
            input(type="password" name="password" id="password" placeholder="Password")
            br
            input(type="submit" name="submit" value="Create Account")
        if error 
            p= error


    else if page == "login"
        br
        br
        form(action="./login" method="post")
            input(type="email" name="email" id="email" placeholder="Email address")
            br
            input(type="password" name="password" id="password" placeholder="Password")
            br
            input(type="submit" name="submit" value="Submit")
        if error 
            p= error
            if attempts >= 2
                p If you have forgotten your password, you can reset it here.
                a(href="./reset-password") Reset Password

    else if page == "reset-password"
        br
        if flag
            h3 Resetting password for superUser75@gmail.com.
            form(action="./reset-password" method="post")
                input(type="password" name="password" id="password" placeholder="Enter your new password")
                br
                input(type="password" name="password2" id="password2" placeholder="Confirm your new password")
                br
                input(type="submit" name="submit" value="Change Password")
            h1= flag
        else
            p We all forget out passwords! That's OK, you can reset it here.
            form(action="./reset-password" method="post")
                input(type="email" name="email" id="email" placeholder="Enter your email address")
                br
                input(type="submit" name="submit" value="Submit")
            if error
                p= error
            if success
                p= success